<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

     <flow name="createOrder">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set Content Type"/>
                <dw:transform-message doc:name="Set variable - order">

            <dw:set-variable variableName="order"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>

                <sfdc:query-single config-ref="Salesforce__Basic_Authentication" query="dsql:SELECT CustomerId__c, MailingStreet, MailingCity, MailingPostalCode, MailingState, MailingCountry, OtherStreet, OtherCity, OtherPostalCode, OtherState, OtherCountry FROM Contact WHERE CustomerId__c = '#[flowVars.customerId]'" doc:name="Get Contact"/>
        <choice doc:name="Does Contact Exist?">
            <when expression="#[payload != empty]">

                <dw:transform-message doc:name="Map Data to Salesforce Order" metadata:id="ea42dff6-d450-4136-b292-8abf3238f2f9">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%function toSalesforceString(arrayOfObjects) {
	output: arrayOfObjects map ((value) -> (
      value mapObject { 
          '$$': $$ ++ ': ' ++ $
      } pluck $ joinBy '\n'
  )) joinBy '\n_________________________________________________\n\n'
}
---
{
	ContractId: p("sfdc.contract.id"),
	AccountId: p("sfdc.account.id"),
	BillingStreet: payload.MailingStreet,
	BillingCity: payload.MailingCity,
	BillingState: payload.MailingState,
	BillingPostalCode: payload.MailingPostalCode,
	BillingCountry: payload.MailingCountry,
	ShippingStreet: payload.OtherStreet,
	ShippingCity: payload.OtherCity,
	ShippingState: payload.OtherState,
	ShippingPostalCode: payload.OtherPostalCode,
	ShippingCountry: payload.OtherCountry,
	SubTotalAmount__c: flowVars.order.subtotal,
	TotalAmount__c: flowVars.order.total, 
	EffectiveDate: now,
	Status: "Draft",
	Description: "Anypoint Store Order:",
	PickupDetails__c: toSalesforceString(flowVars.order.orderItems.pickupItems).output,
	ShipmentDetails__c: toSalesforceString(flowVars.order.orderItems.shipmentItems).output,
	PartnersDetails__c: toSalesforceString(flowVars.order.orderItems.partnersItems).output,
	CustomerId__c: payload.CustomerId__c 
}]]></dw:set-payload>
                </dw:transform-message>
                <sfdc:create-single config-ref="Salesforce__Basic_Authentication" type="Order" doc:name="Create Order">
                    <sfdc:object ref="#[payload]"/>
                </sfdc:create-single>
                <choice doc:name="Was Order created ?">
                    <when expression="#[payload.success]">
                        <dw:transform-message doc:name="Create Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was created",
	orderId: payload.Id
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <set-property propertyName="http.status" value="#[400]" doc:name="Bad Request"/>
                        <dw:transform-message doc:name="Create Order was not created Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was not created"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-property propertyName="Content-Type" value="application/json" doc:name="Set Content Type"/>
                <dw:transform-message doc:name="Create Customer not found Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Customer not found"
}]]></dw:set-payload>
                </dw:transform-message>

            </otherwise>
        </choice>
    </flow>
    <flow name="getOrders">
        <sfdc:query-all config-ref="Salesforce__Basic_Authentication" query="SELECT Id, SubtotalAmount__c,  TotalAmount__c, PickupDetails__c, ShipmentDetails__c, PartnersDetails__c, Status, CustomerId__c, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry, ShippingStreet,ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry FROM Order WHERE CustomerId__c = '#[flowVars.customerId]' AND IsDeleted = false ORDER BY CreatedDate DESC" doc:name="Get Orders"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload mimeType="application/java" />
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>

        <dw:transform-message doc:name="Map Salesforce Orders to Response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json

%function toJsonFormat(orderItems) {
	output: read(deserializeProducts(orderItems).output, "application/json")
}

%function deserializeProducts(orderItems) {
	output: '[' ++ using (products = (orderItems splitBy "\n_________________________________________________\n\n" ))
	(products map deserializeProduct($).output joinBy ",\n") ++ ']'
}

%function deserializeProduct(product) {
	output: "{" ++ using (lines = product splitBy '\n')
	   ((lines map (line) -> (line splitBy ': ')) map (field) -> ('\"$(field[0])\": \"$(field[1])\"') joinBy ",\n") ++ "}"
}

---
payload map (order) -> {
	orderId: order.Id,
	customerId: order.CustomerId__c,
	shippingAddress: {
		address: order.ShippingStreet,
		city: order.ShippingCity,
		state: order.ShippingState,
		postalCode: order.ShippingPostalCode,
		country: order.ShippingCountry 
	},
	billingAddress: {
		address: order.BillingStreet,
		city: order.BillingCity,
		state: order.BillingState,
		postalCode: order.BillingPostalCode,
		country: order.BillingCountry 
	},
	subtotal: order.SubtotalAmount__c,
	total: order.TotalAmount__c,
	status: order.Status,
	trackingNumber: order.Id, 
	orderItems: {
		pickupItems: toJsonFormat(order.PickupDetails__c).output,
		shipmentItems: toJsonFormat(order.ShipmentDetails__c).output,
		partnersItems: toJsonFormat(order.PartnersDetails__c).output
	}
}
]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="getOrder">
        <sfdc:query-single config-ref="Salesforce__Basic_Authentication"  doc:name="Get Order" query="SELECT Id, SubtotalAmount__c,  TotalAmount__c, PickupDetails__c, ShipmentDetails__c, PartnersDetails__c, Status, CustomerId__c, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry, ShippingStreet,ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry FROM Order WHERE Id= '#[flowVars.orderId]'">
        </sfdc:query-single>

        <choice doc:name="Does Order exist?">
            <when expression="payload != null">
                <dw:transform-message doc:name="Map Salesforce Order to Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json

%function toJsonFormat(orderItems) {
	output: read(deserializeProducts(orderItems).output, "application/json")
}

%function deserializeProducts(orderItems) {
	output: '[' ++ using (products = (orderItems splitBy "\n_________________________________________________\n\n" ))
	(products map deserializeProduct($).output joinBy ",\n") ++ ']'
}

%function deserializeProduct(product) {
	output: "{" ++ using (lines = product splitBy '\n')
	   ((lines map (line) -> (line splitBy ': ')) map (field) -> ('\"$(field[0])\": \"$(field[1])\"') joinBy ",\n") ++ "}"
}
---
{
	orderId: payload.Id,
	customerId: payload.CustomerId__c,
	subtotal: payload.SubtotalAmount__c,
	total: payload.TotalAmount__c,
	status: payload.Status,
	trackingNumber: payload.Id,
	shippingAddress: {
		address: payload.ShippingStreet,
		city: payload.ShippingCity,
		state: payload.ShippingState,
		postalCode: payload.ShippingPostalCode,
		country: payload.ShippingCountry 
	},
	billingAddress: {
		address: payload.BillingStreet,
		city: payload.BillingCity,
		state: payload.BillingState,
		postalCode: payload.BillingPostalCode,
		country: payload.BillingCountry 
	}, 
	orderItems: {
		pickupItems: toJsonFormat(payload.PickupDetails__c).output,
		shipmentItems: toJsonFormat(payload.ShipmentDetails__c).output,
		partnersItems: toJsonFormat(payload.PartnersDetails__c).output
	}
}
]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <dw:transform-message doc:name="Create Order not found Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order not found"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    </flow>
    <flow name="updateOrder">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set Content Type"/>
        <dw:transform-message doc:name="Set variable - order">

            <dw:set-variable variableName="order"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>

        <sfdc:query-single config-ref="Salesforce__Basic_Authentication" query="SELECT Id FROM Order WHERE  Id= '#[flowVars.orderId]'" doc:name="Get Order"/>
        <choice doc:name="Does Order exist?">
            <when expression="payload != null">
                <dw:transform-message doc:name="Map new data to Salesforce Order" metadata:id="ea42dff6-d450-4136-b292-8abf3238f2f9">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%function toSalesforceString(arrayOfObjects) {
	output: arrayOfObjects map ((value) -> (
      value mapObject { 
          '$$': $$ ++ ': ' ++ $       
      } pluck $ joinBy '\n'
  )) joinBy '\n_________________________________________________\n\n'
}
---
{
	Id: flowVars.orderId,
	SubtotalAmount__c: flowVars.order.subtotal,
	TotalAmount__c: flowVars.order.total,
	Status: flowVars.order.status,
	BillingStreet: flowVars.order.billingAddress.address,
	BillingCity: flowVars.order.billingAddress.city,
	BillingState: flowVars.order.billingAddress.state,
	BillingPostalCode: flowVars.order.billingAddress.postalCode,
	BillingCountry: flowVars.order.billingAddress.Country,
	ShippingStreet: flowVars.order.shippingAddress.address,
	ShippingCity: flowVars.order.shippingAddress.city,
	ShippingState: flowVars.order.shippingAddress.state,
	ShippingPostalCode: flowVars.order.shippingAddress.postalCode,
	ShippingCountry: flowVars.order.shippingAddress.country,
	PickupDetails__c: toSalesforceString(flowVars.order.orderItems.pickupItems).output,
	ShipmentDetails__c: toSalesforceString(flowVars.order.orderItems.shipmentItems).output,
	PartnersDetails__c: toSalesforceString(flowVars.order.orderItems.partnersItems).output
}
]]></dw:set-payload>
                </dw:transform-message>
                <sfdc:update-single config-ref="Salesforce__Basic_Authentication" type="Order" doc:name="Update Order">
                    <sfdc:object ref="#[payload]"/>
                </sfdc:update-single>
                <choice doc:name="Was Order updated?">
                    <when expression="#[payload.success]">
                        <dw:transform-message doc:name="Create Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was updated"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <set-property propertyName="http.status" value="#[400]" doc:name="Bad Request"/>
                        <dw:transform-message doc:name="Create Order was not updated Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was not updated"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <dw:transform-message doc:name="Create Order not found Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was not updated"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    </flow>
    <flow name="deleteOrder">
        <sfdc:delete config-ref="Salesforce__Basic_Authentication" doc:name="Delete Order">
            <sfdc:ids ref="#[[flowVars.orderId]]"/>
        </sfdc:delete>
        <choice doc:name="Was Order deleted ?">
            <when expression="#[payload[0].success]">
                <dw:transform-message doc:name="Create Order was deleted Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was deleted"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[400]" doc:name="Bad Request"/>
                <dw:transform-message doc:name="Create Order was not deleted Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was not deleted"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    </flow>
    <flow name="updateOrderStatus">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set Content Type"/>
        <dw:transform-message doc:name="Set variable - orderStatus">
            <dw:set-variable variableName="orderStatus"><![CDATA[%dw 1.0
%output application/java
---
payload.status
]]></dw:set-variable>
        </dw:transform-message>
        <sfdc:query-single config-ref="Salesforce__Basic_Authentication" query="SELECT Id FROM Order WHERE Id = '#[flowVars.orderId]'" doc:name="Get Order"/>
        <choice doc:name="Does Order exist?">
            <when expression="payload != null">
                <dw:transform-message doc:name="Map new status to Salesforce Order" metadata:id="ea42dff6-d450-4136-b292-8abf3238f2f9">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	Id: flowVars.orderId,
	Status: flowVars.orderStatus
}]]></dw:set-payload>
                </dw:transform-message>
                <sfdc:update-single config-ref="Salesforce__Basic_Authentication" type="Order" doc:name="Update Order status">
                    <sfdc:object ref="#[payload]"/>
                </sfdc:update-single>

                <choice doc:name="Was Order status updated?">
                    <when expression="#[payload.success]">
                        <set-property propertyName="http.status" value="#[200]" doc:name="Set http status"/>
                        <dw:transform-message doc:name="Create Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order status was updated"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <set-property propertyName="http.status" value="#[400]" doc:name="Bad Request"/>
                        <dw:transform-message doc:name="Create Order status was not updated Response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order was not updated"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <dw:transform-message doc:name="Create Order not found Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Order status was not updated"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    </flow>

</mule>

